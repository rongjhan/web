"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["importData_upload-mjs"],{

/***/ "../node_modules/d3-dsv/src/csv.js":
/*!*****************************************!*\
  !*** ../node_modules/d3-dsv/src/csv.js ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"csvFormat\": function() { return /* binding */ csvFormat; },\n/* harmony export */   \"csvFormatBody\": function() { return /* binding */ csvFormatBody; },\n/* harmony export */   \"csvFormatRow\": function() { return /* binding */ csvFormatRow; },\n/* harmony export */   \"csvFormatRows\": function() { return /* binding */ csvFormatRows; },\n/* harmony export */   \"csvFormatValue\": function() { return /* binding */ csvFormatValue; },\n/* harmony export */   \"csvParse\": function() { return /* binding */ csvParse; },\n/* harmony export */   \"csvParseRows\": function() { return /* binding */ csvParseRows; }\n/* harmony export */ });\n/* harmony import */ var _dsv_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dsv.js */ \"../node_modules/d3-dsv/src/dsv.js\");\n\n\nvar csv = (0,_dsv_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\",\");\n\nvar csvParse = csv.parse;\nvar csvParseRows = csv.parseRows;\nvar csvFormat = csv.format;\nvar csvFormatBody = csv.formatBody;\nvar csvFormatRows = csv.formatRows;\nvar csvFormatRow = csv.formatRow;\nvar csvFormatValue = csv.formatValue;\n\n\n//# sourceURL=webpack:///../node_modules/d3-dsv/src/csv.js?");

/***/ }),

/***/ "../node_modules/d3-dsv/src/dsv.js":
/*!*****************************************!*\
  !*** ../node_modules/d3-dsv/src/dsv.js ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\nvar EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n\n\n//# sourceURL=webpack:///../node_modules/d3-dsv/src/dsv.js?");

/***/ }),

/***/ "./src/mod_source/upload.mjs":
/*!***********************************!*\
  !*** ./src/mod_source/upload.mjs ***!
  \***********************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"descriptor\": function() { return /* binding */ descriptor; },\n/* harmony export */   \"produce\": function() { return /* binding */ getData; }\n/* harmony export */ });\n/* harmony import */ var _util_parseDataType_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/_parseDataType.mjs */ \"./src/mod_source/util/_parseDataType.mjs\");\n/* harmony import */ var _util_data_parseCsvToArray_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util_data/parseCsvToArray.mjs */ \"./src/util_data/parseCsvToArray.mjs\");\n\r\n\r\n\r\n\r\nvar descriptor = {\r\n    data:null,//null means it can't handle any data,and also dont need it\r\n    config:{\r\n        fileType:{type:\"selection\",options:[\"csv\"],defaultValue:\"csv\"},\r\n        parse:{type:\"selection\",options:[\"none\",\"number\",\"dateTime\",\"num?date\"],defaultValue:\"number\"},\r\n        locales:{type:\"text\",defaultValue:'en',required:true},\r\n        dateTimeFormats:{type:\"text\",defaultValue:'YYYY-MM-DD',required:true}\r\n    }\r\n}\r\n\r\nfunction getData({config}){\r\n    var {fileType,parse} = config\r\n    var locales = config.locales.split(\",\")\r\n    var dateTimeFormats = config.dateTimeFormats.split(\",\")\r\n    switch(fileType){\r\n        case \"csv\":\r\n            return new Promise(\r\n                function(resolve){\r\n                    var input = document.createElement(\"input\")\r\n                    input.type=\"file\"\r\n                \r\n                    input.addEventListener(\"change\",function(e){\r\n                        const reader = new FileReader(); \r\n                        reader.onload = function fileReadCompleted() {\r\n                            var array = (0,_util_data_parseCsvToArray_mjs__WEBPACK_IMPORTED_MODULE_1__.parseCsvToArray)(reader.result)\r\n                            resolve((0,_util_parseDataType_mjs__WEBPACK_IMPORTED_MODULE_0__.parseDataType)(array,parse,locales,dateTimeFormats))\r\n                        };\r\n                        reader.readAsText(this.files[0]); \r\n                        // reader.readAsText會自動把utf8文件的BOM頭（如果有的話）去除，其它讀取方式要注意手動去除。\r\n                    })\r\n                    input.click()\r\n                }\r\n            )\r\n    }\r\n\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/mod_source/upload.mjs?");

/***/ }),

/***/ "./src/util_data/parseCsvToArray.mjs":
/*!*******************************************!*\
  !*** ./src/util_data/parseCsvToArray.mjs ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parseCsvToArray\": function() { return /* binding */ parseCsvToArray; }\n/* harmony export */ });\n/* harmony import */ var d3_dsv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-dsv */ \"../node_modules/d3-dsv/src/csv.js\");\n\r\n\r\nfunction parseCsvToArray(csvString){\r\n    var rawCsv = (0,d3_dsv__WEBPACK_IMPORTED_MODULE_0__.csvParse)(csvString)\r\n\r\n    // console.log(reader.result,rawCsv); \r\n    //將csv格式由[{},{}]轉成[[header],[]]\r\n    var csv = rawCsv.map(function(d,i,array){\r\n        var list = []\r\n        for (var title of array.columns){\r\n            list.push(d[title])\r\n        }\r\n        return list\r\n    })\r\n\r\n    csv.splice(0,0,rawCsv.columns)\r\n    return csv\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./src/util_data/parseCsvToArray.mjs?");

/***/ })

}]);